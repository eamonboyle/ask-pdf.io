generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Channel {
    id        String       @id
    name      String
    type      Channel_type @default(TEXT)
    profileId String
    serverId  String
    createdAt DateTime     @default(now())
    updatedAt DateTime

    @@index([profileId])
    @@index([serverId])
}

model Member {
    id        String      @id
    role      Member_role
    profileId String
    serverId  String
    createdAt DateTime    @default(now())
    updatedAt DateTime

    @@index([profileId])
    @@index([serverId])
}

model Profile {
    id        String   @id
    userId    String   @unique
    name      String
    imageUrl  String   @db.Text
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime
}

model Server {
    id         String   @id
    name       String
    imageUrl   String   @db.Text
    inviteCode String   @db.Text
    profileId  String
    createdAt  DateTime @default(now())
    updatedAt  DateTime

    @@index([profileId])
}

enum Member_role {
    ADMIN
    MODERATOR
    GUEST
}

enum Channel_type {
    TEXT
    AUDIO
    VIDEO
}

// ASK PDF TABLES

model AskPDF_User {
    id    String @id @unique // matches kinde user id
    email String @unique

    File AskPDF_File[]

    stripeCustomerId       String?   @unique @map(name: "stripe_customer_id") // stripe customer id
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id") // stripe subscription id
    stripePriceId          String?   @unique @map(name: "stripe_price_id") // stripe price id
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end") // stripe current period end
}

enum AskPDF_UploadStatus {
    PENDING
    PROCESSING
    FAIL
    SUCCESS
}

model AskPDF_File {
    id            String              @id @default(cuid())
    name          String
    uploadStatus  AskPDF_UploadStatus @default(PENDING)
    url           String
    key           String
    createdAt     DateTime            @default(now())
    updatedAt     DateTime            @updatedAt
    AskPDF_User   AskPDF_User?        @relation(fields: [askPDF_UserId], references: [id])
    askPDF_UserId String?
}
